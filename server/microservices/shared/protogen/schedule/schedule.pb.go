// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.3
// source: schedule/schedule.proto

package schedule

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionStatus int32

const (
	SessionStatus_SESSION_STATUS_UNSPECIFIED SessionStatus = 0 // For SessionStatus
	SessionStatus_SCHEDULED                  SessionStatus = 1 // Session is scheduled
	SessionStatus_COMPLETED                  SessionStatus = 2 // Session is completed
	SessionStatus_CANCELED                   SessionStatus = 3 // Session is canceled
)

// Enum value maps for SessionStatus.
var (
	SessionStatus_name = map[int32]string{
		0: "SESSION_STATUS_UNSPECIFIED",
		1: "SCHEDULED",
		2: "COMPLETED",
		3: "CANCELED",
	}
	SessionStatus_value = map[string]int32{
		"SESSION_STATUS_UNSPECIFIED": 0,
		"SCHEDULED":                  1,
		"COMPLETED":                  2,
		"CANCELED":                   3,
	}
)

func (x SessionStatus) Enum() *SessionStatus {
	p := new(SessionStatus)
	*p = x
	return p
}

func (x SessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schedule_schedule_proto_enumTypes[0].Descriptor()
}

func (SessionStatus) Type() protoreflect.EnumType {
	return &file_schedule_schedule_proto_enumTypes[0]
}

func (x SessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionStatus.Descriptor instead.
func (SessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{0}
}

type SessionType int32

const (
	SessionType_SESSION_TYPE_UNSPECIFIED SessionType = 0
	SessionType_BLOOD_TEST               SessionType = 1  // Blood test
	SessionType_URINE_TEST               SessionType = 2  // Urine test
	SessionType_X_RAY                    SessionType = 3  // X-ray
	SessionType_MRI                      SessionType = 4  // MRI
	SessionType_CT_SCAN                  SessionType = 5  // CT scan
	SessionType_ULTRASOUND               SessionType = 6  // Ultrasound
	SessionType_ECG                      SessionType = 7  // Electrocardiogram
	SessionType_COVID_TEST               SessionType = 8  // COVID-19 test
	SessionType_DNA_TEST                 SessionType = 9  // DNA test
	SessionType_ALLERGY_TEST             SessionType = 10 // Allergy test
	SessionType_GENETIC_TEST             SessionType = 11 // Genetic test
	SessionType_OTHER                    SessionType = 12 // Other types of tests
)

// Enum value maps for SessionType.
var (
	SessionType_name = map[int32]string{
		0:  "SESSION_TYPE_UNSPECIFIED",
		1:  "BLOOD_TEST",
		2:  "URINE_TEST",
		3:  "X_RAY",
		4:  "MRI",
		5:  "CT_SCAN",
		6:  "ULTRASOUND",
		7:  "ECG",
		8:  "COVID_TEST",
		9:  "DNA_TEST",
		10: "ALLERGY_TEST",
		11: "GENETIC_TEST",
		12: "OTHER",
	}
	SessionType_value = map[string]int32{
		"SESSION_TYPE_UNSPECIFIED": 0,
		"BLOOD_TEST":               1,
		"URINE_TEST":               2,
		"X_RAY":                    3,
		"MRI":                      4,
		"CT_SCAN":                  5,
		"ULTRASOUND":               6,
		"ECG":                      7,
		"COVID_TEST":               8,
		"DNA_TEST":                 9,
		"ALLERGY_TEST":             10,
		"GENETIC_TEST":             11,
		"OTHER":                    12,
	}
)

func (x SessionType) Enum() *SessionType {
	p := new(SessionType)
	*p = x
	return p
}

func (x SessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_schedule_schedule_proto_enumTypes[1].Descriptor()
}

func (SessionType) Type() protoreflect.EnumType {
	return &file_schedule_schedule_proto_enumTypes[1]
}

func (x SessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionType.Descriptor instead.
func (SessionType) EnumDescriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{1}
}

type SessionMode int32

const (
	SessionMode_SESSION_MODE_UNSPECIFIED SessionMode = 0
	SessionMode_IN_PERSON                SessionMode = 1 // In-person session
	SessionMode_VIRTUAL                  SessionMode = 2 // Virtual session
	SessionMode_HOME_VISIT               SessionMode = 3 // Home visit session
)

// Enum value maps for SessionMode.
var (
	SessionMode_name = map[int32]string{
		0: "SESSION_MODE_UNSPECIFIED",
		1: "IN_PERSON",
		2: "VIRTUAL",
		3: "HOME_VISIT",
	}
	SessionMode_value = map[string]int32{
		"SESSION_MODE_UNSPECIFIED": 0,
		"IN_PERSON":                1,
		"VIRTUAL":                  2,
		"HOME_VISIT":               3,
	}
)

func (x SessionMode) Enum() *SessionMode {
	p := new(SessionMode)
	*p = x
	return p
}

func (x SessionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_schedule_schedule_proto_enumTypes[2].Descriptor()
}

func (SessionMode) Type() protoreflect.EnumType {
	return &file_schedule_schedule_proto_enumTypes[2]
}

func (x SessionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionMode.Descriptor instead.
func (SessionMode) EnumDescriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{2}
}

type SessionPriority int32

const (
	SessionPriority_SESSION_PRIORITY_UNSPECIFIED SessionPriority = 0
	SessionPriority_HIGH                         SessionPriority = 1 // High priority
	SessionPriority_MEDIUM                       SessionPriority = 2 // Medium priority
	SessionPriority_LOW                          SessionPriority = 3 // Low priority
)

// Enum value maps for SessionPriority.
var (
	SessionPriority_name = map[int32]string{
		0: "SESSION_PRIORITY_UNSPECIFIED",
		1: "HIGH",
		2: "MEDIUM",
		3: "LOW",
	}
	SessionPriority_value = map[string]int32{
		"SESSION_PRIORITY_UNSPECIFIED": 0,
		"HIGH":                         1,
		"MEDIUM":                       2,
		"LOW":                          3,
	}
)

func (x SessionPriority) Enum() *SessionPriority {
	p := new(SessionPriority)
	*p = x
	return p
}

func (x SessionPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_schedule_schedule_proto_enumTypes[3].Descriptor()
}

func (SessionPriority) Type() protoreflect.EnumType {
	return &file_schedule_schedule_proto_enumTypes[3]
}

func (x SessionPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionPriority.Descriptor instead.
func (SessionPriority) EnumDescriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{3}
}

type SessionResult int32

const (
	SessionResult_SESSION_RESULT_UNSPECIFIED SessionResult = 0
	SessionResult_POSITIVE                   SessionResult = 1 // Positive result
	SessionResult_NEGATIVE                   SessionResult = 2 // Negative result
	SessionResult_INCONCLUSIVE               SessionResult = 3 // Inconclusive result
)

// Enum value maps for SessionResult.
var (
	SessionResult_name = map[int32]string{
		0: "SESSION_RESULT_UNSPECIFIED",
		1: "POSITIVE",
		2: "NEGATIVE",
		3: "INCONCLUSIVE",
	}
	SessionResult_value = map[string]int32{
		"SESSION_RESULT_UNSPECIFIED": 0,
		"POSITIVE":                   1,
		"NEGATIVE":                   2,
		"INCONCLUSIVE":               3,
	}
)

func (x SessionResult) Enum() *SessionResult {
	p := new(SessionResult)
	*p = x
	return p
}

func (x SessionResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionResult) Descriptor() protoreflect.EnumDescriptor {
	return file_schedule_schedule_proto_enumTypes[4].Descriptor()
}

func (SessionResult) Type() protoreflect.EnumType {
	return &file_schedule_schedule_proto_enumTypes[4]
}

func (x SessionResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionResult.Descriptor instead.
func (SessionResult) EnumDescriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{4}
}

type SessionPaymentStatus int32

const (
	SessionPaymentStatus_SESSION_PAYMENT_STATUS_UNSPECIFIED SessionPaymentStatus = 0
	SessionPaymentStatus_PAID                               SessionPaymentStatus = 1 // Payment completed
	SessionPaymentStatus_UNPAID                             SessionPaymentStatus = 2 // Payment pending
)

// Enum value maps for SessionPaymentStatus.
var (
	SessionPaymentStatus_name = map[int32]string{
		0: "SESSION_PAYMENT_STATUS_UNSPECIFIED",
		1: "PAID",
		2: "UNPAID",
	}
	SessionPaymentStatus_value = map[string]int32{
		"SESSION_PAYMENT_STATUS_UNSPECIFIED": 0,
		"PAID":                               1,
		"UNPAID":                             2,
	}
)

func (x SessionPaymentStatus) Enum() *SessionPaymentStatus {
	p := new(SessionPaymentStatus)
	*p = x
	return p
}

func (x SessionPaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionPaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schedule_schedule_proto_enumTypes[5].Descriptor()
}

func (SessionPaymentStatus) Type() protoreflect.EnumType {
	return &file_schedule_schedule_proto_enumTypes[5]
}

func (x SessionPaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionPaymentStatus.Descriptor instead.
func (SessionPaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{5}
}

type ScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosticCentreId string        `protobuf:"bytes,1,opt,name=diagnostic_centre_id,json=diagnosticCentreId,proto3" json:"diagnostic_centre_id,omitempty"`
	UserId             string        `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         // ID of the diagnostic center
	Date               string        `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`                                           // Date of the session (e.g., "2025-05-01")
	Time               string        `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`                                           // Time of the session (e.g., "10:00 AM")
	TestType           SessionType   `protobuf:"varint,5,opt,name=test_type,json=testType,proto3,enum=SessionType" json:"test_type,omitempty"` // Type of diagnostic test
	Status             SessionStatus `protobuf:"varint,6,opt,name=status,proto3,enum=SessionStatus" json:"status,omitempty"`
	Notes              *string       `protobuf:"bytes,7,opt,name=notes,proto3,oneof" json:"notes,omitempty"` // Status of the session              // Additional notes (optional)
}

func (x *ScheduleRequest) Reset() {
	*x = ScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest) ProtoMessage() {}

func (x *ScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest.ProtoReflect.Descriptor instead.
func (*ScheduleRequest) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduleRequest) GetDiagnosticCentreId() string {
	if x != nil {
		return x.DiagnosticCentreId
	}
	return ""
}

func (x *ScheduleRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScheduleRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ScheduleRequest) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *ScheduleRequest) GetTestType() SessionType {
	if x != nil {
		return x.TestType
	}
	return SessionType_SESSION_TYPE_UNSPECIFIED
}

func (x *ScheduleRequest) GetStatus() SessionStatus {
	if x != nil {
		return x.Status
	}
	return SessionStatus_SESSION_STATUS_UNSPECIFIED
}

func (x *ScheduleRequest) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

type ListDiagnosticCentreSchedulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosticCentreId string        `protobuf:"bytes,1,opt,name=diagnostic_centre_id,json=diagnosticCentreId,proto3" json:"diagnostic_centre_id,omitempty"` // ID of the diagnostic center// ID of the user scheduling the session
	Status             SessionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=SessionStatus" json:"status,omitempty"`
	Date               string        `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Limit              int32         `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`   // Number of results to return
	Offset             int32         `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"` // Status of the session
}

func (x *ListDiagnosticCentreSchedulesRequest) Reset() {
	*x = ListDiagnosticCentreSchedulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiagnosticCentreSchedulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiagnosticCentreSchedulesRequest) ProtoMessage() {}

func (x *ListDiagnosticCentreSchedulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiagnosticCentreSchedulesRequest.ProtoReflect.Descriptor instead.
func (*ListDiagnosticCentreSchedulesRequest) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{1}
}

func (x *ListDiagnosticCentreSchedulesRequest) GetDiagnosticCentreId() string {
	if x != nil {
		return x.DiagnosticCentreId
	}
	return ""
}

func (x *ListDiagnosticCentreSchedulesRequest) GetStatus() SessionStatus {
	if x != nil {
		return x.Status
	}
	return SessionStatus_SESSION_STATUS_UNSPECIFIED
}

func (x *ListDiagnosticCentreSchedulesRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ListDiagnosticCentreSchedulesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListDiagnosticCentreSchedulesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetDiagnosticCentreScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosticCentreId string `protobuf:"bytes,1,opt,name=diagnostic_centre_id,json=diagnosticCentreId,proto3" json:"diagnostic_centre_id,omitempty"` // ID of the diagnostic center
	ScheduleId         string `protobuf:"bytes,2,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`                           // ID of the scheduled session        // ID of the user scheduling the session
}

func (x *GetDiagnosticCentreScheduleRequest) Reset() {
	*x = GetDiagnosticCentreScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosticCentreScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosticCentreScheduleRequest) ProtoMessage() {}

func (x *GetDiagnosticCentreScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosticCentreScheduleRequest.ProtoReflect.Descriptor instead.
func (*GetDiagnosticCentreScheduleRequest) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{2}
}

func (x *GetDiagnosticCentreScheduleRequest) GetDiagnosticCentreId() string {
	if x != nil {
		return x.DiagnosticCentreId
	}
	return ""
}

func (x *GetDiagnosticCentreScheduleRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

type GetScheduledSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // ID of the scheduled session
}

func (x *GetScheduledSessionRequest) Reset() {
	*x = GetScheduledSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduledSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledSessionRequest) ProtoMessage() {}

func (x *GetScheduledSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledSessionRequest.ProtoReflect.Descriptor instead.
func (*GetScheduledSessionRequest) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{3}
}

func (x *GetScheduledSessionRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *GetScheduledSessionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UpdateScheduledSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId         string        `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	UserId             string        `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                       // ID of the scheduled session             // ID of the user scheduling the session
	DiagnosticCentreId string        `protobuf:"bytes,3,opt,name=diagnostic_centre_id,json=diagnosticCentreId,proto3" json:"diagnostic_centre_id,omitempty"` // ID of the diagnostic center
	Date               string        `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`                                                         // Date of the session (e.g., "2025-05-01")
	Time               string        `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`                                                         // Time of the session (e.g., "10:00 AM")
	TestType           SessionType   `protobuf:"varint,6,opt,name=test_type,json=testType,proto3,enum=SessionType" json:"test_type,omitempty"`               // Type of diagnostic test
	Status             SessionStatus `protobuf:"varint,7,opt,name=status,proto3,enum=SessionStatus" json:"status,omitempty"`
	Notes              *string       `protobuf:"bytes,8,opt,name=notes,proto3,oneof" json:"notes,omitempty"` // Status of the session              // Additional notes (optional)
}

func (x *UpdateScheduledSessionRequest) Reset() {
	*x = UpdateScheduledSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduledSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledSessionRequest) ProtoMessage() {}

func (x *UpdateScheduledSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledSessionRequest.ProtoReflect.Descriptor instead.
func (*UpdateScheduledSessionRequest) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateScheduledSessionRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *UpdateScheduledSessionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateScheduledSessionRequest) GetDiagnosticCentreId() string {
	if x != nil {
		return x.DiagnosticCentreId
	}
	return ""
}

func (x *UpdateScheduledSessionRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *UpdateScheduledSessionRequest) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *UpdateScheduledSessionRequest) GetTestType() SessionType {
	if x != nil {
		return x.TestType
	}
	return SessionType_SESSION_TYPE_UNSPECIFIED
}

func (x *UpdateScheduledSessionRequest) GetStatus() SessionStatus {
	if x != nil {
		return x.Status
	}
	return SessionStatus_SESSION_STATUS_UNSPECIFIED
}

func (x *UpdateScheduledSessionRequest) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

type CancelScheduledSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string        `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	UserId     string        `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status     SessionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=SessionStatus" json:"status,omitempty"` // Status of the session
}

func (x *CancelScheduledSessionRequest) Reset() {
	*x = CancelScheduledSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelScheduledSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelScheduledSessionRequest) ProtoMessage() {}

func (x *CancelScheduledSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelScheduledSessionRequest.ProtoReflect.Descriptor instead.
func (*CancelScheduledSessionRequest) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{5}
}

func (x *CancelScheduledSessionRequest) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *CancelScheduledSessionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CancelScheduledSessionRequest) GetStatus() SessionStatus {
	if x != nil {
		return x.Status
	}
	return SessionStatus_SESSION_STATUS_UNSPECIFIED
}

type ListScheduledSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // ID of the user scheduling the session// Offset for pagination
	Limit  int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                // Number of results to return
	Offset int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`              // Number of results to skip
}

func (x *ListScheduledSessionsRequest) Reset() {
	*x = ListScheduledSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScheduledSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduledSessionsRequest) ProtoMessage() {}

func (x *ListScheduledSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduledSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListScheduledSessionsRequest) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{6}
}

func (x *ListScheduledSessionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListScheduledSessionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListScheduledSessionsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetScheduledSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId         string  `protobuf:"bytes,1,opt,name=schedule_id,proto3" json:"schedule_id,omitempty"`
	UserId             string  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                       // ID of the scheduled session// ID of the user who scheduled the session
	DiagnosticCentreId string  `protobuf:"bytes,3,opt,name=diagnostic_centre_id,json=diagnosticCentreId,proto3" json:"diagnostic_centre_id,omitempty"` // ID of the diagnostic center
	Date               string  `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`                                                         // Date of the session (e.g., "2025-05-01")
	Time               string  `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`                                                         // Time of the session (e.g., "10:00 AM")
	TestType           string  `protobuf:"bytes,6,opt,name=test_type,json=testType,proto3" json:"test_type,omitempty"`
	Status             string  `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Notes              *string `protobuf:"bytes,8,opt,name=notes,proto3,oneof" json:"notes,omitempty"`                     // Status of the session             // Additional notes (optional)
	CreatedAt          string  `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`  // Creation timestamp
	UpdatedAt          string  `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // Last update timestamp
}

func (x *GetScheduledSessionResponse) Reset() {
	*x = GetScheduledSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduledSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledSessionResponse) ProtoMessage() {}

func (x *GetScheduledSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledSessionResponse.ProtoReflect.Descriptor instead.
func (*GetScheduledSessionResponse) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{7}
}

func (x *GetScheduledSessionResponse) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *GetScheduledSessionResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetScheduledSessionResponse) GetDiagnosticCentreId() string {
	if x != nil {
		return x.DiagnosticCentreId
	}
	return ""
}

func (x *GetScheduledSessionResponse) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetScheduledSessionResponse) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *GetScheduledSessionResponse) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *GetScheduledSessionResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetScheduledSessionResponse) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *GetScheduledSessionResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetScheduledSessionResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetDiagnosticCentreScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId         string  `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`                           // ID of the scheduled session
	UserId             string  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                       // ID of the user who scheduled the session
	DiagnosticCentreId string  `protobuf:"bytes,3,opt,name=diagnostic_centre_id,json=diagnosticCentreId,proto3" json:"diagnostic_centre_id,omitempty"` // ID of the diagnostic center
	Date               string  `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`                                                         // Date of the session (e.g., "2025-05-01")
	Time               string  `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`                                                         // Time of the session (e.g., "10:00 AM")
	TestType           string  `protobuf:"bytes,6,opt,name=test_type,json=testType,proto3" json:"test_type,omitempty"`
	Status             string  `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"` // Type of diagnostic test
	Notes              *string `protobuf:"bytes,8,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	CreatedAt          string  `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          string  `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // Creation timestamp
}

func (x *GetDiagnosticCentreScheduleResponse) Reset() {
	*x = GetDiagnosticCentreScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosticCentreScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosticCentreScheduleResponse) ProtoMessage() {}

func (x *GetDiagnosticCentreScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosticCentreScheduleResponse.ProtoReflect.Descriptor instead.
func (*GetDiagnosticCentreScheduleResponse) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{8}
}

func (x *GetDiagnosticCentreScheduleResponse) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *GetDiagnosticCentreScheduleResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetDiagnosticCentreScheduleResponse) GetDiagnosticCentreId() string {
	if x != nil {
		return x.DiagnosticCentreId
	}
	return ""
}

func (x *GetDiagnosticCentreScheduleResponse) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetDiagnosticCentreScheduleResponse) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *GetDiagnosticCentreScheduleResponse) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *GetDiagnosticCentreScheduleResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDiagnosticCentreScheduleResponse) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *GetDiagnosticCentreScheduleResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetDiagnosticCentreScheduleResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ScheduledSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId         string  `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`                           // ID of the scheduled session
	UserId             string  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                       // ID of the user who scheduled the session
	DiagnosticCentreId string  `protobuf:"bytes,3,opt,name=diagnostic_centre_id,json=diagnosticCentreId,proto3" json:"diagnostic_centre_id,omitempty"` // ID of the diagnostic center
	Date               string  `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`                                                         // Date of the session (e.g., "2025-05-01")
	Time               string  `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`                                                         // Time of the session (e.g., "10:00 AM")
	TestType           string  `protobuf:"bytes,6,opt,name=test_type,json=testType,proto3" json:"test_type,omitempty"`
	Status             string  `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"` // Type of diagnostic test
	Notes              *string `protobuf:"bytes,8,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	CreatedAt          string  `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`  // Creation timestamp
	UpdatedAt          string  `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // Additional notes (optional)
}

func (x *ScheduledSession) Reset() {
	*x = ScheduledSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledSession) ProtoMessage() {}

func (x *ScheduledSession) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledSession.ProtoReflect.Descriptor instead.
func (*ScheduledSession) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{9}
}

func (x *ScheduledSession) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ScheduledSession) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScheduledSession) GetDiagnosticCentreId() string {
	if x != nil {
		return x.DiagnosticCentreId
	}
	return ""
}

func (x *ScheduledSession) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ScheduledSession) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *ScheduledSession) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *ScheduledSession) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ScheduledSession) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *ScheduledSession) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ScheduledSession) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ListScheduledSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*ScheduledSession `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"` // List of scheduled sessions
}

func (x *ListScheduledSessionsResponse) Reset() {
	*x = ListScheduledSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScheduledSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduledSessionsResponse) ProtoMessage() {}

func (x *ListScheduledSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduledSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListScheduledSessionsResponse) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{10}
}

func (x *ListScheduledSessionsResponse) GetSessions() []*ScheduledSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type ListDiagnosticCentreSchedulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*ScheduledSession `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"` // List of scheduled sessions
}

func (x *ListDiagnosticCentreSchedulesResponse) Reset() {
	*x = ListDiagnosticCentreSchedulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiagnosticCentreSchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiagnosticCentreSchedulesResponse) ProtoMessage() {}

func (x *ListDiagnosticCentreSchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiagnosticCentreSchedulesResponse.ProtoReflect.Descriptor instead.
func (*ListDiagnosticCentreSchedulesResponse) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{11}
}

func (x *ListDiagnosticCentreSchedulesResponse) GetSessions() []*ScheduledSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type UpdateScheduledSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // ID of the updated session
	Message    string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                      // Confirmation message
	CreatedAt  string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Creation timestamp
	UpdatedAt  string `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // Status of the session     // Amount paid for the session
}

func (x *UpdateScheduledSessionResponse) Reset() {
	*x = UpdateScheduledSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScheduledSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScheduledSessionResponse) ProtoMessage() {}

func (x *UpdateScheduledSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScheduledSessionResponse.ProtoReflect.Descriptor instead.
func (*UpdateScheduledSessionResponse) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateScheduledSessionResponse) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *UpdateScheduledSessionResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateScheduledSessionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateScheduledSessionResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UpdateScheduledSessionResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type CancelScheduledSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // ID of the canceled session
	Message    string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`             // Confirmation message
}

func (x *CancelScheduledSessionResponse) Reset() {
	*x = CancelScheduledSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelScheduledSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelScheduledSessionResponse) ProtoMessage() {}

func (x *CancelScheduledSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelScheduledSessionResponse.ProtoReflect.Descriptor instead.
func (*CancelScheduledSessionResponse) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{13}
}

func (x *CancelScheduledSessionResponse) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *CancelScheduledSessionResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CancelScheduledSessionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleId string `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // ID of the scheduled session
	Message    string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt  string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  string `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // Confirmation message
}

func (x *ScheduleResponse) Reset() {
	*x = ScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_schedule_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponse) ProtoMessage() {}

func (x *ScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_schedule_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponse.ProtoReflect.Descriptor instead.
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return file_schedule_schedule_proto_rawDescGZIP(), []int{14}
}

func (x *ScheduleResponse) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *ScheduleResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScheduleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ScheduleResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ScheduleResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_schedule_schedule_proto protoreflect.FileDescriptor

var file_schedule_schedule_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x77, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x74,
	0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x74, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xab, 0x02, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x1d, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x65,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xca, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43,
	0x65, 0x6e, 0x74, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xb2, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x74, 0x0a, 0x1e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x2a, 0x5b, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xd2,
	0x01, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x52, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x58, 0x5f, 0x52, 0x41, 0x59, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x52, 0x49, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x0e, 0x0a,
	0x0a, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a,
	0x03, 0x45, 0x43, 0x47, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x56, 0x49, 0x44, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4e, 0x41, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x59, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x4e, 0x45, 0x54, 0x49,
	0x43, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x0c, 0x2a, 0x57, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x54, 0x10, 0x03, 0x2a, 0x52, 0x0a, 0x0f,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x03,
	0x2a, 0x5d, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x03, 0x2a,
	0x54, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x50,
	0x41, 0x49, 0x44, 0x10, 0x02, 0x32, 0xbb, 0x07, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a,
	0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x74, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x1a, 0x1b, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7d, 0x0a, 0x15, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6c, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x12, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x2d, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x74, 0x72,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x43, 0x65,
	0x6e, 0x74, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x12, 0x45, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x51, 0x55, 0x44, 0x55, 0x53, 0x4b, 0x55, 0x4e, 0x4c, 0x45, 0x2f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schedule_schedule_proto_rawDescOnce sync.Once
	file_schedule_schedule_proto_rawDescData = file_schedule_schedule_proto_rawDesc
)

func file_schedule_schedule_proto_rawDescGZIP() []byte {
	file_schedule_schedule_proto_rawDescOnce.Do(func() {
		file_schedule_schedule_proto_rawDescData = protoimpl.X.CompressGZIP(file_schedule_schedule_proto_rawDescData)
	})
	return file_schedule_schedule_proto_rawDescData
}

var file_schedule_schedule_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_schedule_schedule_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_schedule_schedule_proto_goTypes = []interface{}{
	(SessionStatus)(0),                            // 0: SessionStatus
	(SessionType)(0),                              // 1: SessionType
	(SessionMode)(0),                              // 2: SessionMode
	(SessionPriority)(0),                          // 3: SessionPriority
	(SessionResult)(0),                            // 4: SessionResult
	(SessionPaymentStatus)(0),                     // 5: SessionPaymentStatus
	(*ScheduleRequest)(nil),                       // 6: ScheduleRequest
	(*ListDiagnosticCentreSchedulesRequest)(nil),  // 7: ListDiagnosticCentreSchedulesRequest
	(*GetDiagnosticCentreScheduleRequest)(nil),    // 8: GetDiagnosticCentreScheduleRequest
	(*GetScheduledSessionRequest)(nil),            // 9: GetScheduledSessionRequest
	(*UpdateScheduledSessionRequest)(nil),         // 10: UpdateScheduledSessionRequest
	(*CancelScheduledSessionRequest)(nil),         // 11: CancelScheduledSessionRequest
	(*ListScheduledSessionsRequest)(nil),          // 12: ListScheduledSessionsRequest
	(*GetScheduledSessionResponse)(nil),           // 13: GetScheduledSessionResponse
	(*GetDiagnosticCentreScheduleResponse)(nil),   // 14: GetDiagnosticCentreScheduleResponse
	(*ScheduledSession)(nil),                      // 15: ScheduledSession
	(*ListScheduledSessionsResponse)(nil),         // 16: ListScheduledSessionsResponse
	(*ListDiagnosticCentreSchedulesResponse)(nil), // 17: ListDiagnosticCentreSchedulesResponse
	(*UpdateScheduledSessionResponse)(nil),        // 18: UpdateScheduledSessionResponse
	(*CancelScheduledSessionResponse)(nil),        // 19: CancelScheduledSessionResponse
	(*ScheduleResponse)(nil),                      // 20: ScheduleResponse
}
var file_schedule_schedule_proto_depIdxs = []int32{
	1,  // 0: ScheduleRequest.test_type:type_name -> SessionType
	0,  // 1: ScheduleRequest.status:type_name -> SessionStatus
	0,  // 2: ListDiagnosticCentreSchedulesRequest.status:type_name -> SessionStatus
	1,  // 3: UpdateScheduledSessionRequest.test_type:type_name -> SessionType
	0,  // 4: UpdateScheduledSessionRequest.status:type_name -> SessionStatus
	0,  // 5: CancelScheduledSessionRequest.status:type_name -> SessionStatus
	15, // 6: ListScheduledSessionsResponse.sessions:type_name -> ScheduledSession
	15, // 7: ListDiagnosticCentreSchedulesResponse.sessions:type_name -> ScheduledSession
	6,  // 8: ScheduleService.CreateScheduleSession:input_type -> ScheduleRequest
	9,  // 9: ScheduleService.GetScheduleSession:input_type -> GetScheduledSessionRequest
	10, // 10: ScheduleService.UpdateScheduleSession:input_type -> UpdateScheduledSessionRequest
	11, // 11: ScheduleService.CancelScheduleSession:input_type -> CancelScheduledSessionRequest
	12, // 12: ScheduleService.ListScheduleSessions:input_type -> ListScheduledSessionsRequest
	7,  // 13: ScheduleService.ListDiagnosticCentreSchedules:input_type -> ListDiagnosticCentreSchedulesRequest
	8,  // 14: ScheduleService.GetDiagnosticCentreSchedule:input_type -> GetDiagnosticCentreScheduleRequest
	20, // 15: ScheduleService.CreateScheduleSession:output_type -> ScheduleResponse
	13, // 16: ScheduleService.GetScheduleSession:output_type -> GetScheduledSessionResponse
	18, // 17: ScheduleService.UpdateScheduleSession:output_type -> UpdateScheduledSessionResponse
	19, // 18: ScheduleService.CancelScheduleSession:output_type -> CancelScheduledSessionResponse
	16, // 19: ScheduleService.ListScheduleSessions:output_type -> ListScheduledSessionsResponse
	17, // 20: ScheduleService.ListDiagnosticCentreSchedules:output_type -> ListDiagnosticCentreSchedulesResponse
	14, // 21: ScheduleService.GetDiagnosticCentreSchedule:output_type -> GetDiagnosticCentreScheduleResponse
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_schedule_schedule_proto_init() }
func file_schedule_schedule_proto_init() {
	if File_schedule_schedule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_schedule_schedule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiagnosticCentreSchedulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosticCentreScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduledSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduledSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelScheduledSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScheduledSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduledSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosticCentreScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScheduledSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiagnosticCentreSchedulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScheduledSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelScheduledSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_schedule_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_schedule_schedule_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_schedule_schedule_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_schedule_schedule_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_schedule_schedule_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_schedule_schedule_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schedule_schedule_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_schedule_schedule_proto_goTypes,
		DependencyIndexes: file_schedule_schedule_proto_depIdxs,
		EnumInfos:         file_schedule_schedule_proto_enumTypes,
		MessageInfos:      file_schedule_schedule_proto_msgTypes,
	}.Build()
	File_schedule_schedule_proto = out.File
	file_schedule_schedule_proto_rawDesc = nil
	file_schedule_schedule_proto_goTypes = nil
	file_schedule_schedule_proto_depIdxs = nil
}
