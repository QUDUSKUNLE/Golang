// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: schedule/schedule.proto

package schedule

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScheduleService_CreateScheduleSession_FullMethodName         = "/ScheduleService/CreateScheduleSession"
	ScheduleService_GetScheduleSession_FullMethodName            = "/ScheduleService/GetScheduleSession"
	ScheduleService_UpdateScheduleSession_FullMethodName         = "/ScheduleService/UpdateScheduleSession"
	ScheduleService_CancelScheduleSession_FullMethodName         = "/ScheduleService/CancelScheduleSession"
	ScheduleService_ListScheduleSessions_FullMethodName          = "/ScheduleService/ListScheduleSessions"
	ScheduleService_ListDiagnosticCentreSchedules_FullMethodName = "/ScheduleService/ListDiagnosticCentreSchedules"
	ScheduleService_GetDiagnosticCentreSchedule_FullMethodName   = "/ScheduleService/GetDiagnosticCentreSchedule"
)

// ScheduleServiceClient is the client API for ScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleServiceClient interface {
	CreateScheduleSession(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	GetScheduleSession(ctx context.Context, in *GetScheduledSessionRequest, opts ...grpc.CallOption) (*GetScheduledSessionResponse, error)
	UpdateScheduleSession(ctx context.Context, in *UpdateScheduledSessionRequest, opts ...grpc.CallOption) (*UpdateScheduledSessionResponse, error)
	CancelScheduleSession(ctx context.Context, in *CancelScheduledSessionRequest, opts ...grpc.CallOption) (*CancelScheduledSessionResponse, error)
	ListScheduleSessions(ctx context.Context, in *ListScheduledSessionsRequest, opts ...grpc.CallOption) (*ListScheduledSessionsResponse, error)
	ListDiagnosticCentreSchedules(ctx context.Context, in *ListDiagnosticCentreSchedulesRequest, opts ...grpc.CallOption) (*ListDiagnosticCentreSchedulesResponse, error)
	GetDiagnosticCentreSchedule(ctx context.Context, in *GetDiagnosticCentreScheduleRequest, opts ...grpc.CallOption) (*GetDiagnosticCentreScheduleResponse, error)
}

type scheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleServiceClient(cc grpc.ClientConnInterface) ScheduleServiceClient {
	return &scheduleServiceClient{cc}
}

func (c *scheduleServiceClient) CreateScheduleSession(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, ScheduleService_CreateScheduleSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetScheduleSession(ctx context.Context, in *GetScheduledSessionRequest, opts ...grpc.CallOption) (*GetScheduledSessionResponse, error) {
	out := new(GetScheduledSessionResponse)
	err := c.cc.Invoke(ctx, ScheduleService_GetScheduleSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) UpdateScheduleSession(ctx context.Context, in *UpdateScheduledSessionRequest, opts ...grpc.CallOption) (*UpdateScheduledSessionResponse, error) {
	out := new(UpdateScheduledSessionResponse)
	err := c.cc.Invoke(ctx, ScheduleService_UpdateScheduleSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) CancelScheduleSession(ctx context.Context, in *CancelScheduledSessionRequest, opts ...grpc.CallOption) (*CancelScheduledSessionResponse, error) {
	out := new(CancelScheduledSessionResponse)
	err := c.cc.Invoke(ctx, ScheduleService_CancelScheduleSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) ListScheduleSessions(ctx context.Context, in *ListScheduledSessionsRequest, opts ...grpc.CallOption) (*ListScheduledSessionsResponse, error) {
	out := new(ListScheduledSessionsResponse)
	err := c.cc.Invoke(ctx, ScheduleService_ListScheduleSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) ListDiagnosticCentreSchedules(ctx context.Context, in *ListDiagnosticCentreSchedulesRequest, opts ...grpc.CallOption) (*ListDiagnosticCentreSchedulesResponse, error) {
	out := new(ListDiagnosticCentreSchedulesResponse)
	err := c.cc.Invoke(ctx, ScheduleService_ListDiagnosticCentreSchedules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetDiagnosticCentreSchedule(ctx context.Context, in *GetDiagnosticCentreScheduleRequest, opts ...grpc.CallOption) (*GetDiagnosticCentreScheduleResponse, error) {
	out := new(GetDiagnosticCentreScheduleResponse)
	err := c.cc.Invoke(ctx, ScheduleService_GetDiagnosticCentreSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleServiceServer is the server API for ScheduleService service.
// All implementations must embed UnimplementedScheduleServiceServer
// for forward compatibility
type ScheduleServiceServer interface {
	CreateScheduleSession(context.Context, *ScheduleRequest) (*ScheduleResponse, error)
	GetScheduleSession(context.Context, *GetScheduledSessionRequest) (*GetScheduledSessionResponse, error)
	UpdateScheduleSession(context.Context, *UpdateScheduledSessionRequest) (*UpdateScheduledSessionResponse, error)
	CancelScheduleSession(context.Context, *CancelScheduledSessionRequest) (*CancelScheduledSessionResponse, error)
	ListScheduleSessions(context.Context, *ListScheduledSessionsRequest) (*ListScheduledSessionsResponse, error)
	ListDiagnosticCentreSchedules(context.Context, *ListDiagnosticCentreSchedulesRequest) (*ListDiagnosticCentreSchedulesResponse, error)
	GetDiagnosticCentreSchedule(context.Context, *GetDiagnosticCentreScheduleRequest) (*GetDiagnosticCentreScheduleResponse, error)
	mustEmbedUnimplementedScheduleServiceServer()
}

// UnimplementedScheduleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleServiceServer struct {
}

func (UnimplementedScheduleServiceServer) CreateScheduleSession(context.Context, *ScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduleSession not implemented")
}
func (UnimplementedScheduleServiceServer) GetScheduleSession(context.Context, *GetScheduledSessionRequest) (*GetScheduledSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduleSession not implemented")
}
func (UnimplementedScheduleServiceServer) UpdateScheduleSession(context.Context, *UpdateScheduledSessionRequest) (*UpdateScheduledSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduleSession not implemented")
}
func (UnimplementedScheduleServiceServer) CancelScheduleSession(context.Context, *CancelScheduledSessionRequest) (*CancelScheduledSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelScheduleSession not implemented")
}
func (UnimplementedScheduleServiceServer) ListScheduleSessions(context.Context, *ListScheduledSessionsRequest) (*ListScheduledSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduleSessions not implemented")
}
func (UnimplementedScheduleServiceServer) ListDiagnosticCentreSchedules(context.Context, *ListDiagnosticCentreSchedulesRequest) (*ListDiagnosticCentreSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiagnosticCentreSchedules not implemented")
}
func (UnimplementedScheduleServiceServer) GetDiagnosticCentreSchedule(context.Context, *GetDiagnosticCentreScheduleRequest) (*GetDiagnosticCentreScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnosticCentreSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) mustEmbedUnimplementedScheduleServiceServer() {}

// UnsafeScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServiceServer will
// result in compilation errors.
type UnsafeScheduleServiceServer interface {
	mustEmbedUnimplementedScheduleServiceServer()
}

func RegisterScheduleServiceServer(s grpc.ServiceRegistrar, srv ScheduleServiceServer) {
	s.RegisterService(&ScheduleService_ServiceDesc, srv)
}

func _ScheduleService_CreateScheduleSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).CreateScheduleSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_CreateScheduleSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).CreateScheduleSession(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetScheduleSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetScheduleSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetScheduleSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetScheduleSession(ctx, req.(*GetScheduledSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_UpdateScheduleSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduledSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).UpdateScheduleSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_UpdateScheduleSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).UpdateScheduleSession(ctx, req.(*UpdateScheduledSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_CancelScheduleSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelScheduledSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).CancelScheduleSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_CancelScheduleSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).CancelScheduleSession(ctx, req.(*CancelScheduledSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_ListScheduleSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScheduledSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ListScheduleSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_ListScheduleSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ListScheduleSessions(ctx, req.(*ListScheduledSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_ListDiagnosticCentreSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiagnosticCentreSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ListDiagnosticCentreSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_ListDiagnosticCentreSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ListDiagnosticCentreSchedules(ctx, req.(*ListDiagnosticCentreSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetDiagnosticCentreSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiagnosticCentreScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetDiagnosticCentreSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetDiagnosticCentreSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetDiagnosticCentreSchedule(ctx, req.(*GetDiagnosticCentreScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleService_ServiceDesc is the grpc.ServiceDesc for ScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ScheduleService",
	HandlerType: (*ScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScheduleSession",
			Handler:    _ScheduleService_CreateScheduleSession_Handler,
		},
		{
			MethodName: "GetScheduleSession",
			Handler:    _ScheduleService_GetScheduleSession_Handler,
		},
		{
			MethodName: "UpdateScheduleSession",
			Handler:    _ScheduleService_UpdateScheduleSession_Handler,
		},
		{
			MethodName: "CancelScheduleSession",
			Handler:    _ScheduleService_CancelScheduleSession_Handler,
		},
		{
			MethodName: "ListScheduleSessions",
			Handler:    _ScheduleService_ListScheduleSessions_Handler,
		},
		{
			MethodName: "ListDiagnosticCentreSchedules",
			Handler:    _ScheduleService_ListDiagnosticCentreSchedules_Handler,
		},
		{
			MethodName: "GetDiagnosticCentreSchedule",
			Handler:    _ScheduleService_GetDiagnosticCentreSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule/schedule.proto",
}
