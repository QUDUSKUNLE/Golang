syntax = "proto3";
option go_package = "github.com/QUDUSKUNLE/microservices/shared/protogen/schedule";

import "google/api/annotations.proto";
// import "common/error.proto";

enum ScheduleStatus {
  SCHEDULE_STATUS_UNSPECIFIED = 0; // For SessionStatus
  SCHEDULED = 1; // Session is scheduled
  COMPLETED = 2; // Session is completed
  CANCELED = 3;  // Session is canceled
}

enum ScheduleType {
  SCHEDULE_TYPE_UNSPECIFIED = 0;
  BLOOD_TEST = 1; // Blood test
  URINE_TEST = 2; // Urine test
  X_RAY = 3;     // X-ray
  MRI = 4;       // MRI
  CT_SCAN = 5;   // CT scan
  ULTRASOUND = 6; // Ultrasound
  ECG = 7;       // Electrocardiogram
  COVID_TEST = 8; // COVID-19 test
  DNA_TEST = 9;   // DNA test
  ALLERGY_TEST = 10; // Allergy test
  GENETIC_TEST = 11; // Genetic test
  OTHER = 12;   // Other types of tests
}

service ScheduleService {
  // Create a new schedule
  rpc CreateSchedule(ScheduleRequest) returns (ScheduleResponse) {
    // @Summary Create a new schedule
    // @Description Schedule a new diagnostic session for a user.
    // @Tags Schedule
    // @Accept json
    // @Produce json
    // @Param body body ScheduleRequest true "Schedule request"
    // @Success 201 {object} ScheduleResponse
    option (google.api.http) = {
      post: "/v1/schedules",
      body: "*"
    };
  }
  // Get a schedule by ID
  rpc GetSchedule(GetScheduleRequest) returns (GetScheduleResponse) {
    // @Summary Get a schedule by ID
    // @Description Retrieve a scheduled diagnostic session by its ID.
    // @Tags Schedule
    // @Accept json
    // @Produce json
    // @Param schedule_id path string true "Schedule ID"
    // @Success 200 {object} GetScheduleResponse
    option (google.api.http) = {
      get: "/v1/schedules/{schedule_id}"
    };
  }
  // Update a schedule
  rpc UpdateSchedule(UpdateScheduleRequest) returns (UpdateScheduleResponse) {
    // @Summary Update a schedule
    // @Description Update an existing scheduled diagnostic session.
    // @Tags Schedule
    // @Accept json
    // @Produce json
    // @Param schedule_id path string true "Schedule ID"
    // @Param body body UpdateScheduleRequest true "Update schedule request"
    // @Success 200 {object} UpdateScheduleResponse
    // @Failure 400 {object} common.ErrorResponse
    option (google.api.http) = {
      put: "/v1/schedules/{schedule_id}",
      body: "*"
    };
  }
  // Cancel a schedule
  rpc CancelSchedule(CancelScheduleRequest) returns (CancelScheduleResponse) {
    // @Summary Cancel a schedule
    // @Description Cancel a scheduled diagnostic session by its ID.
    // @Tags Schedule
    // @Accept json
    // @Produce json
    // @Param schedule_id path string true "Schedule ID"
    // @Success 200 {object} CancelScheduleResponse
    option (google.api.http) = {
      delete: "/v1/schedules/{schedule_id}"
    };
  }
  // List all schedules
  rpc ListSchedules(ListSchedulesRequest) returns (ListSchedulesResponse) {
    // @Summary List all schedules
    // @Description Retrieve a list of all scheduled diagnostic sessions for a user.
    // @Tags Schedule
    // @Accept json
    // @Produce json
    // @Param user_id query string false "User ID"
    // @Param limit query int32 false "Limit"
    // @Param offset query int32 false "Offset"
    option (google.api.http) = {
      get: "/v1/schedules"
    };
  }
}

message ScheduleRequest {              // ID of the user scheduling the session
  string diagnostic_centre_id = 1;
  string user_id = 2; // ID of the diagnostic center
  string date = 3;                 // Date of the session (e.g., "2025-05-01")
  string time = 4;                 // Time of the session (e.g., "10:00 AM")
  ScheduleType test_type = 5;            // Type of diagnostic test
  ScheduleStatus test_status = 6;
  optional string notes = 7;            // Status of the session              // Additional notes (optional)
}

message GetScheduleRequest {
  string schedule_id = 1;
  string user_id = 2;            // ID of the scheduled session
}

message UpdateScheduleRequest {
  string schedule_id = 1;
  string user_id = 2;           // ID of the scheduled session             // ID of the user scheduling the session
  string diagnostic_centre_id = 3; // ID of the diagnostic center
  string date = 4;                 // Date of the session (e.g., "2025-05-01")
  string time = 5;                 // Time of the session (e.g., "10:00 AM")
  ScheduleType test_type = 6;            // Type of diagnostic test
  ScheduleStatus test_status = 7;
  optional string notes = 8;                // Status of the session              // Additional notes (optional)
}

message CancelScheduleRequest {
  string schedule_id = 1;  
  string user_id = 2;
  ScheduleStatus test_status = 3;        // Status of the session
}

message ListSchedulesRequest {
  string user_id = 1;          // ID of the user scheduling the session// Offset for pagination
  int32 limit = 2;             // Number of results to return
  int32 offset = 3;            // Number of results to skip
}

message GetScheduleResponse {
  string schedule_id = 1 [json_name = "schedule_id"]; 
  string user_id = 2;          // ID of the scheduled session// ID of the user who scheduled the session
  string diagnostic_centre_id = 3; // ID of the diagnostic center
  string date = 4;                 // Date of the session (e.g., "2025-05-01")
  string time = 5;                 // Time of the session (e.g., "10:00 AM")
  ScheduleType test_type = 6;            // Type of diagnostic test
  ScheduleStatus test_status = 7;
  optional string notes = 8;         // Status of the session             // Additional notes (optional)
  string created_at = 9;          // Creation timestamp
  string updated_at = 10;          // Last update timestamp
}

message ScheduledSession {
  string schedule_id = 1;           // ID of the scheduled session
  string user_id = 2;              // ID of the user who scheduled the session
  string diagnostic_centre_id = 3; // ID of the diagnostic center
  string date = 4;                 // Date of the session (e.g., "2025-05-01")
  string time = 5;                 // Time of the session (e.g., "10:00 AM")
  ScheduleType test_type = 6;            // Type of diagnostic test
  ScheduleStatus test_status = 7;        // Type of diagnostic test
  optional string notes = 8;
  string created_at = 9;          // Creation timestamp
  string updated_at = 10;                        // Additional notes (optional)
}

message ListSchedulesResponse {
  repeated ScheduledSession sessions = 1; // List of scheduled sessions
}

message UpdateScheduleResponse {
  string schedule_id = 1;
  string user_id = 2;          // ID of the updated session
  string message = 3;              // Confirmation message
  string created_at = 4;          // Creation timestamp
  string updated_at = 5;         // Status of the session     // Amount paid for the session
}

message CancelScheduleResponse {
  string schedule_id = 1;
  string user_id = 2;             // ID of the canceled session
  string message = 3;              // Confirmation message
}

message ScheduleResponse {
  string schedule_id = 1;
  string user_id = 2;             // ID of the scheduled session
  string message = 3;
  string created_at = 4;
  string updated_at = 5;              // Confirmation message
}
