syntax = "proto3";
option go_package = "github.com/QUDUSKUNLE/microservices/shared/protogen/user";

import "google/api/annotations.proto";

enum UserType {
  UNSPECIFIED = 0;
  USER = 1;
  DIAGNOSTIC_CENTRE = 2;
  HOSPITAL = 3;
  ADMIN = 4;
}


service UserService {
  // Create a new user
  rpc Create(CreateUserRequest) returns (SuccessResponse) {
    // @Summary Create a new user
    // @Description Register a new user with email, password, and user type.
    // @Tags User
    // @Accept json
    // @Produce json
    // @Param body body CreateUserRequest true "User registration request"
    // @Success 200 {object} SuccessResponse
    option (google.api.http) = {
      post: "/v1/users",
      body: "*"
    };
  }
  // Get a list of users
  rpc ReadUsers(GetUsersRequest) returns (GetUsersResponse) {
    // @Summary Get a list of users
    // @Description Retrieve a paginated list of users.
    // @Tags User
    // @Accept json
    // @Produce json
    // @Param limit query int32 false "Limit"
    // @Param offset query int32 false "Offset"
    // @Success 200 {object} GetUsersResponse
    option (google.api.http) = {
      get: "/v1/users",
    };
  }
  // Get a single user by ID
  rpc Read(SingleUserRequest) returns (GetUserResponse) {
    // @Summary Get a user by ID
    // @Description Retrieve a user by their unique ID.
    // @Tags User
    // @Accept json
    // @Produce json
    // @Param id path string true "User ID"
    // @Success 200 {object} GetUserResponse
    option (google.api.http) = {
      get: "/v1/users/{id}",
    };
  }
  // Get home information
  rpc Home(HomeRequest) returns (GetHomeResponse) {
    // @Summary Get home information
    // @Description Retrieve home information for the user service.
    // @Tags User
    // @Accept json
    // @Produce json
    // @Success 200 {object} GetHomeResponse
    option (google.api.http) = {
      get: "/v1/home",
    };
  }
  // Update a user
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    // @Summary Update a user
    // @Description Update user information such as NIN.
    // @Tags User
    // @Accept json
    // @Produce json
    // @Param body body UpdateUserRequest true "Update user request"
    // @Success 200 {object} UpdateUserResponse
    option (google.api.http) = {
      put: "/v1/users",
      body: "*"
    };
  }
}

message CreateUserRequest {
  string email = 1 [json_name = "email"];
  string password = 2 [json_name = "password"];
  string confirm_password = 3 [json_name = "confirm_password"];
  string diagnostic_centre = 4 [json_name = "diagnostic_centre"];
  UserType user_type = 5 [json_name = "user_type"];
}

message GetUsersRequest {
  int32 limit = 1 [json_name = "limit"];
  int32 offset = 2 [json_name = "offset"];
}

message HomeRequest {}

message User {
  string id = 1 [json_name = "id"];
  string email = 2 [json_name = "email"];
  string nin = 5 [json_name = "nin"];
  string created_at = 6 [json_name = "created_at"];
  string updated_at = 7 [json_name = "updated_at"];
}

message SingleUserRequest {
  string id = 1 [json_name = "id"];
}

message CreateUserResponse {
  string id = 1 [json_name = "id"];
  string email = 2 [json_name = "email"];
  string password = 3 [json_name = "password"];
  string created_at = 4 [json_name = "created_at"];
  string updated_at = 5 [json_name = "updated_at"];
}

message UpdateUserRequest {
  string nin = 1 [json_name = "nin"];
}

message SuccessResponse {
  string data = 1 [json_name = "response"];
}

message GetUsersResponse {
  repeated User data = 1 [json_name = "data"];
}

message GetUserResponse {
  User data = 1;
}

message GetHomeResponse {
  string message = 1;
}

message UpdateUserResponse {
  string data = 1 [json_name = "response"];
}
