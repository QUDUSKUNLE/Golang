syntax = "proto3";
option go_package = "github.com/QUDUSKUNLE/microservices/shared/protogen/diagnostic";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

// @title Diagnostic Service API
// @version 1.0
// @description This is the API documentation for the Diagnostic Service.
service DiagnosticService {
  rpc CreateDiagnostic(CreateDiagnosticRequest) returns (CreateDiagnosticResponse) {
    // @Summary Create a new diagnostic centre
    // @Description Create a new diagnostic centre with the provided details.
    // @Tags Diagnostic
    // @Accept json
    // @Produce json
    // @Param body body CreateDiagnosticRequest true "Create diagnostic request"
    // @Success 200 {object} CreateDiagnosticResponse
    option (google.api.http) = {
      post: "/v1/diagnostics",
      body: "*"
    };
  }
  rpc GetDiagnostic(GetDiagnosticRequest) returns (GetDiagnosticResponse) {
    // @Summary Get a diagnostic centre by ID
    // @Description Retrieve the details of a diagnostic centre using its ID.
    // @Tags Diagnostic
    // @Accept json
    // @Produce json
    // @Param diagnostic_id path string true "Diagnostic ID"
    // @Success 200 {object} GetDiagnosticResponse
    option (google.api.http) = {
      get: "/v1/diagnostics/{diagnostic_id}"
    };
  }
  rpc UpdateDiagnostic(UpdateDiagnosticRequest) returns (UpdateDiagnosticResponse) {
    // @Summary Update a diagnostic centre
    // @Description Update the details of an existing diagnostic centre.
    // @Tags Diagnostic
    // @Accept json
    // @Produce json
    // @Param diagnostic_id path string true "Diagnostic ID"
    // @Param body body UpdateDiagnosticRequest true "Update diagnostic request"
    // @Success 200 {object} UpdateDiagnosticResponse
    option (google.api.http) = {
      put: "/v1/diagnostics/{diagnostic_id}",
      body: "*"
    };
  }
  rpc DeleteDiagnostic(DeleteDiagnosticRequest) returns (DeleteDiagnosticResponse) {
    // @Summary Delete a diagnostic centre
    // @Description Delete a diagnostic centre using its ID.
    // @Tags Diagnostic
    // @Accept json
    // @Produce json
    // @Param diagnostic_id path string true "Diagnostic ID"
    // @Success 200 {object} DeleteDiagnosticResponse
    option (google.api.http) = {
      delete: "/v1/diagnostics/{diagnostic_id}"
    };
  }
  rpc ListDiagnostics(ListDiagnosticsRequest) returns (ListDiagnosticsResponse) {
    // @Summary List all diagnostic centres
    // @Description Retrieve a list of all diagnostic centres.
    // @Tags Diagnostic
    // @Accept json
    // @Produce json
    // @Param user_id query string false "User ID"
    // @Param offset query int32 false "Offset for pagination"
    // @Param limit query int32 false "Limit for pagination"
    option (google.api.http) = {
      get: "/v1/diagnostics"
    };
  }

  rpc SearchNearestDiagnostics(SearchNearestDiagnosticsRequest) returns (SearchNearestDiagnosticsResponse) {
    // @Summary Search for nearest diagnostic centres
    // @Description Search for the nearest diagnostic centres based on latitude and longitude.
    // @Tags Diagnostic
    // @Accept json
    // @Produce json
    // @Param latitude query double true "Latitude"
    // @Param longitude query double true "Longitude"
    // @Param limit query int32 false "Limit for pagination"
    // @Param offset query int32 false "Offset for pagination"
    // @Success 200 {object} SearchNearestDiagnosticsResponse
    option (google.api.http) = {
      get: "/v1/diagnostics/search"
    };
  }
  // Get Diagnostics Centre Schedules
  rpc ListDiagnosticSchedules(ListDiagnosticSchedulesRequest) returns (ListDiagnosticSchedulesResponse) {
    // @Summary List all diagnostic schedules
    // @Description Retrieve a list of all diagnostic schedules for a specific diagnostic centre.
    // @Tags Diagnostic
    // @Accept json
    // @Produce json
    // @Param diagnostic_id path string true "Diagnostic ID"
    // @Param test_status query string false "Test status"
    // @Param test_type query string false "Test type"
    // @Param date query string false "Date"
    // @Param offset query int32 false "Offset for pagination"
    // @Param limit query int32 false "Limit for pagination"
    // @Success 200 {object} ListDiagnosticSchedulesResponse
    option (google.api.http) = {
      get: "/v1/diagnostics/{diagnostic_id}/schedules"
    };
  }
  rpc GetDiagnosticSchedule(GetDiagnosticScheduleRequest) returns (GetDiagnosticScheduleResponse) {
    // @Summary Get a diagnostic schedule by ID
    // @Description Retrieve the details of a diagnostic schedule using its ID.
    // @Tags Diagnostic
    // @Accept json
    // @Produce json
    // @Param diagnostic_id path string true "Diagnostic ID"
    // @Param schedule_id path string true "Schedule ID"
    // @Success 200 {object} GetDiagnosticScheduleResponse
    // @Failure 404 {object} ErrorResponse

    option (google.api.http) = {
      get: "/v1/diagnostics/{diagnostic_id}/schedules/{schedule_id}"
    };
  }
}

message CreateDiagnosticRequest {
  string user_id = 1 [json_name = "user_id"];
  string diagnostic_centre_name = 2 [json_name = "diagnostic_centre_name"];
}

message GetDiagnosticRequest {
  string diagnostic_id = 1 [json_name = "diagnostic_id"];
}

message UpdateDiagnosticRequest {
  string diagnostic_id = 1 [json_name = "diagnostic_id"];
  string user_id = 2 [json_name = "user_id"];
  string diagnostic_centre_name = 3 [json_name = "diagnostic_centre_name"];
  Address address = 4 [json_name = "address"];
  Contact contact = 5 [json_name = "contact"];
  double latitude = 6 [json_name = "latitude"];
  double longitude = 7 [json_name = "longitude"];
}

message DeleteDiagnosticRequest {
  string diagnostic_id = 1 [json_name = "diagnostic_id"];
}

message ListDiagnosticsRequest {
  string user_id = 1 [json_name = "user_id"];
  int32 offset = 2 [json_name = "offset"];
  int32 limit = 3 [json_name = "limit"];
}

message GetDiagnosticScheduleRequest {
  string diagnostic_id = 1; // ID of the diagnostic center
  string schedule_id = 2;           // ID of the scheduled session        // ID of the user scheduling the session
}

message ListDiagnosticSchedulesRequest {
  string diagnostic_id = 1 [json_name = "diagnostic_id"];
  string test_status = 2 [json_name = "test_status"]; // Replace with a valid type if schedule.TestStatus is unavailable
  string test_type = 3 [json_name = "test_type"];
  string date = 4 [json_name = "date"];
  int32 offset = 5 [json_name = "offset"];
  int32 limit = 6 [json_name = "limit"];
}

message GetDiagnosticScheduleResponse {
  string schedule_id = 1 [json_name = "schedule_id"];
  string user_id = 2 [json_name = "user_id"];
  string date = 3 [json_name = "date"];
  string time = 4 [json_name = "time"];
  string test_type = 5 [json_name = "test_type"];
  string status = 6 [json_name = "status"];
  optional string notes = 7 [json_name = "notes"];
  string diagnostic_id = 8 [json_name = "diagnostic_id"];
  string diagnostic_centre_name = 9 [json_name = "diagnostic_centre_name"];
  string created_at = 10 [json_name = "created_at"];
  string updated_at = 11 [json_name ="updated_at"];
}

message ListDiagnosticSchedulesResponse {
  repeated GetDiagnosticScheduleResponse schedules = 1;
}

message Address {
  string street = 1 [json_name = "street"];
  string city = 2 [json_name = "city"];
  string state = 3 [json_name = "state"];
  string country = 4 [json_name = "country"];
}


message Contact {
  repeated string phones = 1 [json_name = "phones"];
  string email = 2 [json_name = "email"];
}

message SearchNearestDiagnosticsRequest {
  double latitude = 1 [json_name = "latitude"];
  double longitude = 2 [json_name = "longitude"];
  int32 limit = 3 [json_name = "limit"];
  int32 offset = 4 [json_name = "offset"];
}

message GetDiagnosticResponse {
  string diagnostic_id = 1 [json_name = "diagnostic_id"];
  string user_id = 2 [json_name = "user_id"];
  string diagnostic_centre_name = 3 [json_name = "diagnostic_centre_name"];
  double latitude = 4 [json_name = "latitude"];
  double longitude = 5 [json_name = "longitude"];
  google.protobuf.Struct address = 6 [json_name = "address"];
  google.protobuf.Struct contact = 7 [json_name = "contact"];
  string created_at = 8 [json_name = "created_at"];
  string updated_at = 9 [json_name = "updated_at"];
}


message Diagnostic {
  string diagnostic_id = 1 [json_name = "diagnostic_id"];
  string user_id = 2 [json_name = "user_id"];
  string diagnostic_centre_name = 3 [json_name = "diagnostic_centre_name"];
  double latitude = 4 [json_name = "latitude"];
  double longitude = 5 [json_name = "longitude"];
  google.protobuf.Struct address = 6 [json_name = "address"];
  google.protobuf.Struct contact = 7 [json_name = "contact"];
  string created_at = 8 [json_name = "created_at"];
  string updated_at = 9 [json_name = "updated_at"];
}

message ListDiagnosticsResponse {
  repeated Diagnostic diagnostics = 1 [json_name = "diagnostics"];
}

message DeleteDiagnosticResponse {
  string diagnostic_id = 1 [json_name = "diagnostic_id"];
  string user_id = 2 [json_name = "user_id"];
  string created_at = 3 [json_name = "created_at"];
  string updated_at = 4 [json_name = "updated_at"];
}

message UpdateDiagnosticResponse {
  string diagnostic_id = 1 [json_name = "diagnostic_id"];
  string user_id = 2 [json_name = "user_id"];
  string diagnostic_centre_name = 3 [json_name = "diagnostic_centre_name"];
  double latitude = 4 [json_name = "latitude"];
  double longitude = 5 [json_name = "longitude"];
  Address address = 6 [json_name = "address"];
  Contact contact = 7 [json_name = "contact"];
  string created_at = 8 [json_name = "created_at"];
  string updated_at = 9 [json_name = "updated_at"];
}

message CreateDiagnosticResponse {
  string diagnostic_id = 1 [json_name = "diagnostic_id"];
  string user_id = 2 [json_name = "user_id"];
  string created_at = 3 [json_name = "created_at"];
  string updated_at = 4 [json_name = "updated_at"];
}

message SearchResult {
  string diagnostic_id = 1 [json_name = "diagnostic_id"];
  string diagnostic_centre_name = 2 [json_name = "diagnostic_centre_name"];
  double latitude = 3 [json_name = "latitude"];
  double longitude = 4 [json_name = "longitude"];
  double distance = 5 [json_name = "distance"];
  string distance_unit = 6 [json_name = "distance_unit"];
  string distance_value = 7 [json_name = "distance_value"];
  google.protobuf.Struct address = 8 [json_name = "address"];
  google.protobuf.Struct contact = 9 [json_name = "contact"];
}

message SearchNearestDiagnosticsResponse {
  repeated SearchResult result = 1 [json_name = "diagnostics"];
}
