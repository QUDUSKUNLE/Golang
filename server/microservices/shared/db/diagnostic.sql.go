// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: diagnostic.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDiagnostic = `-- name: CreateDiagnostic :one
INSERT INTO diagnostics (
  user_id,
  diagnostic_centre_name
) VALUES  (
  $1, $2
) RETURNING id, user_id, diagnostic_centre_name, latitude, longitude, address, contact, created_at, updated_at
`

type CreateDiagnosticParams struct {
	UserID               string `db:"user_id" json:"user_id"`
	DiagnosticCentreName string `db:"diagnostic_centre_name" json:"diagnostic_centre_name"`
}

// Inserts a new diagnostic record into the diagnostics table.
func (q *Queries) CreateDiagnostic(ctx context.Context, arg CreateDiagnosticParams) (*Diagnostic, error) {
	row := q.db.QueryRow(ctx, createDiagnostic, arg.UserID, arg.DiagnosticCentreName)
	var i Diagnostic
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DiagnosticCentreName,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Contact,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteDiagnostic = `-- name: DeleteDiagnostic :one
DELETE FROM diagnostics WHERE id = $1 RETURNING id, user_id, diagnostic_centre_name, latitude, longitude, address, contact, created_at, updated_at
`

// Deletes a diagnostic record by its ID.
func (q *Queries) DeleteDiagnostic(ctx context.Context, id string) (*Diagnostic, error) {
	row := q.db.QueryRow(ctx, deleteDiagnostic, id)
	var i Diagnostic
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DiagnosticCentreName,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Contact,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAllDiagnostics = `-- name: GetAllDiagnostics :many
SELECT id, user_id, diagnostic_centre_name, latitude, longitude, address, contact, created_at, updated_at FROM diagnostics
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllDiagnosticsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

// Retrieves all diagnostic records with pagination.
func (q *Queries) GetAllDiagnostics(ctx context.Context, arg GetAllDiagnosticsParams) ([]*Diagnostic, error) {
	rows, err := q.db.Query(ctx, getAllDiagnostics, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Diagnostic
	for rows.Next() {
		var i Diagnostic
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DiagnosticCentreName,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Contact,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiagnostic = `-- name: GetDiagnostic :one
SELECT id, user_id, diagnostic_centre_name, latitude, longitude, address, contact, created_at, updated_at FROM diagnostics WHERE id = $1
`

// Retrieves a single diagnostic record by its ID.
func (q *Queries) GetDiagnostic(ctx context.Context, id string) (*Diagnostic, error) {
	row := q.db.QueryRow(ctx, getDiagnostic, id)
	var i Diagnostic
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DiagnosticCentreName,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Contact,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getDiagnosticCentreSchedules = `-- name: GetDiagnosticCentreSchedules :many
SELECT 
  ds.id AS schedule_id,
  ds.user_id,
  ds.date,
  ds.time,
  ds.test_type,
  ds.status,
  ds.notes,
  d.id AS diagnostic_id,
  d.diagnostic_centre_name
FROM diagnostic_schedules ds
JOIN diagnostics d ON ds.diagnostic_centre_id = d.id
WHERE d.id = $1
ORDER BY ds.date DESC, ds.time DESC
LIMIT $2 OFFSET $3
`

type GetDiagnosticCentreSchedulesParams struct {
	ID     string `db:"id" json:"id"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

type GetDiagnosticCentreSchedulesRow struct {
	ScheduleID           string             `db:"schedule_id" json:"schedule_id"`
	UserID               string             `db:"user_id" json:"user_id"`
	Date                 pgtype.Timestamptz `db:"date" json:"date"`
	Time                 pgtype.Timestamptz `db:"time" json:"time"`
	TestType             ScheduleType       `db:"test_type" json:"test_type"`
	Status               ScheduleStatus     `db:"status" json:"status"`
	Notes                pgtype.Text        `db:"notes" json:"notes"`
	DiagnosticID         string             `db:"diagnostic_id" json:"diagnostic_id"`
	DiagnosticCentreName string             `db:"diagnostic_centre_name" json:"diagnostic_centre_name"`
}

func (q *Queries) GetDiagnosticCentreSchedules(ctx context.Context, arg GetDiagnosticCentreSchedulesParams) ([]*GetDiagnosticCentreSchedulesRow, error) {
	rows, err := q.db.Query(ctx, getDiagnosticCentreSchedules, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDiagnosticCentreSchedulesRow
	for rows.Next() {
		var i GetDiagnosticCentreSchedulesRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.UserID,
			&i.Date,
			&i.Time,
			&i.TestType,
			&i.Status,
			&i.Notes,
			&i.DiagnosticID,
			&i.DiagnosticCentreName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiagnosticCentreSchedulesBySpecificDate = `-- name: GetDiagnosticCentreSchedulesBySpecificDate :many
SELECT 
  ds.id AS schedule_id,
  ds.user_id,
  ds.date,
  ds.time,
  ds.test_type,
  ds.status,
  ds.notes,
  d.diagnostic_centre_name
FROM diagnostic_schedules ds
JOIN diagnostics d ON ds.diagnostic_centre_id = d.id
WHERE d.id = $1 AND ds.date::DATE = $2
ORDER BY ds.time ASC
LIMIT $3 OFFSET $4
`

type GetDiagnosticCentreSchedulesBySpecificDateParams struct {
	ID     string             `db:"id" json:"id"`
	Date   pgtype.Timestamptz `db:"date" json:"date"`
	Limit  int32              `db:"limit" json:"limit"`
	Offset int32              `db:"offset" json:"offset"`
}

type GetDiagnosticCentreSchedulesBySpecificDateRow struct {
	ScheduleID           string             `db:"schedule_id" json:"schedule_id"`
	UserID               string             `db:"user_id" json:"user_id"`
	Date                 pgtype.Timestamptz `db:"date" json:"date"`
	Time                 pgtype.Timestamptz `db:"time" json:"time"`
	TestType             ScheduleType       `db:"test_type" json:"test_type"`
	Status               ScheduleStatus     `db:"status" json:"status"`
	Notes                pgtype.Text        `db:"notes" json:"notes"`
	DiagnosticCentreName string             `db:"diagnostic_centre_name" json:"diagnostic_centre_name"`
}

func (q *Queries) GetDiagnosticCentreSchedulesBySpecificDate(ctx context.Context, arg GetDiagnosticCentreSchedulesBySpecificDateParams) ([]*GetDiagnosticCentreSchedulesBySpecificDateRow, error) {
	rows, err := q.db.Query(ctx, getDiagnosticCentreSchedulesBySpecificDate,
		arg.ID,
		arg.Date,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDiagnosticCentreSchedulesBySpecificDateRow
	for rows.Next() {
		var i GetDiagnosticCentreSchedulesBySpecificDateRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.UserID,
			&i.Date,
			&i.Time,
			&i.TestType,
			&i.Status,
			&i.Notes,
			&i.DiagnosticCentreName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiagnosticCentreSchedulesByStatus = `-- name: GetDiagnosticCentreSchedulesByStatus :many
SELECT 
  ds.id AS schedule_id,
  ds.user_id,
  ds.date,
  ds.time,
  ds.test_type,
  ds.status,
  ds.notes,
  d.diagnostic_centre_name
FROM diagnostic_schedules ds
JOIN diagnostics d ON ds.diagnostic_centre_id = d.id
WHERE d.id = $1 AND ds.status = $2
ORDER BY ds.date DESC, ds.time DESC
LIMIT $3 OFFSET $4
`

type GetDiagnosticCentreSchedulesByStatusParams struct {
	ID     string         `db:"id" json:"id"`
	Status ScheduleStatus `db:"status" json:"status"`
	Limit  int32          `db:"limit" json:"limit"`
	Offset int32          `db:"offset" json:"offset"`
}

type GetDiagnosticCentreSchedulesByStatusRow struct {
	ScheduleID           string             `db:"schedule_id" json:"schedule_id"`
	UserID               string             `db:"user_id" json:"user_id"`
	Date                 pgtype.Timestamptz `db:"date" json:"date"`
	Time                 pgtype.Timestamptz `db:"time" json:"time"`
	TestType             ScheduleType       `db:"test_type" json:"test_type"`
	Status               ScheduleStatus     `db:"status" json:"status"`
	Notes                pgtype.Text        `db:"notes" json:"notes"`
	DiagnosticCentreName string             `db:"diagnostic_centre_name" json:"diagnostic_centre_name"`
}

func (q *Queries) GetDiagnosticCentreSchedulesByStatus(ctx context.Context, arg GetDiagnosticCentreSchedulesByStatusParams) ([]*GetDiagnosticCentreSchedulesByStatusRow, error) {
	rows, err := q.db.Query(ctx, getDiagnosticCentreSchedulesByStatus,
		arg.ID,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDiagnosticCentreSchedulesByStatusRow
	for rows.Next() {
		var i GetDiagnosticCentreSchedulesByStatusRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.UserID,
			&i.Date,
			&i.Time,
			&i.TestType,
			&i.Status,
			&i.Notes,
			&i.DiagnosticCentreName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiagnosticCentreSchedulesByTestType = `-- name: GetDiagnosticCentreSchedulesByTestType :many
SELECT 
  ds.id AS schedule_id,
  ds.user_id,
  ds.date,
  ds.time,
  ds.test_type,
  ds.status,
  ds.notes,
  d.diagnostic_centre_name
FROM diagnostic_schedules ds
JOIN diagnostics d ON ds.diagnostic_centre_id = d.id
WHERE d.id = $1 AND ds.test_type ILIKE '%' || $2 || '%'
ORDER BY ds.date DESC, ds.time DESC
LIMIT $3 OFFSET $4
`

type GetDiagnosticCentreSchedulesByTestTypeParams struct {
	ID      string      `db:"id" json:"id"`
	Column2 pgtype.Text `db:"column_2" json:"column_2"`
	Limit   int32       `db:"limit" json:"limit"`
	Offset  int32       `db:"offset" json:"offset"`
}

type GetDiagnosticCentreSchedulesByTestTypeRow struct {
	ScheduleID           string             `db:"schedule_id" json:"schedule_id"`
	UserID               string             `db:"user_id" json:"user_id"`
	Date                 pgtype.Timestamptz `db:"date" json:"date"`
	Time                 pgtype.Timestamptz `db:"time" json:"time"`
	TestType             ScheduleType       `db:"test_type" json:"test_type"`
	Status               ScheduleStatus     `db:"status" json:"status"`
	Notes                pgtype.Text        `db:"notes" json:"notes"`
	DiagnosticCentreName string             `db:"diagnostic_centre_name" json:"diagnostic_centre_name"`
}

func (q *Queries) GetDiagnosticCentreSchedulesByTestType(ctx context.Context, arg GetDiagnosticCentreSchedulesByTestTypeParams) ([]*GetDiagnosticCentreSchedulesByTestTypeRow, error) {
	rows, err := q.db.Query(ctx, getDiagnosticCentreSchedulesByTestType,
		arg.ID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDiagnosticCentreSchedulesByTestTypeRow
	for rows.Next() {
		var i GetDiagnosticCentreSchedulesByTestTypeRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.UserID,
			&i.Date,
			&i.Time,
			&i.TestType,
			&i.Status,
			&i.Notes,
			&i.DiagnosticCentreName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiagnosticCentreSchedulesWithDiagnosticsDetails = `-- name: GetDiagnosticCentreSchedulesWithDiagnosticsDetails :many
SELECT 
  ds.id AS schedule_id,
  ds.user_id,
  ds.date,
  ds.time,
  ds.test_type,
  ds.status,
  ds.notes,
  d.diagnostic_centre_name,
  d.latitude,
  d.longitude,
  d.address,
  d.contact
FROM diagnostic_schedules ds
JOIN diagnostics d ON ds.diagnostic_centre_id = d.id
WHERE d.id = $1
ORDER BY ds.date DESC, ds.time DESC
LIMIT $2 OFFSET $3
`

type GetDiagnosticCentreSchedulesWithDiagnosticsDetailsParams struct {
	ID     string `db:"id" json:"id"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

type GetDiagnosticCentreSchedulesWithDiagnosticsDetailsRow struct {
	ScheduleID           string             `db:"schedule_id" json:"schedule_id"`
	UserID               string             `db:"user_id" json:"user_id"`
	Date                 pgtype.Timestamptz `db:"date" json:"date"`
	Time                 pgtype.Timestamptz `db:"time" json:"time"`
	TestType             ScheduleType       `db:"test_type" json:"test_type"`
	Status               ScheduleStatus     `db:"status" json:"status"`
	Notes                pgtype.Text        `db:"notes" json:"notes"`
	DiagnosticCentreName string             `db:"diagnostic_centre_name" json:"diagnostic_centre_name"`
	Latitude             pgtype.Float8      `db:"latitude" json:"latitude"`
	Longitude            pgtype.Float8      `db:"longitude" json:"longitude"`
	Address              []byte             `db:"address" json:"address"`
	Contact              []byte             `db:"contact" json:"contact"`
}

func (q *Queries) GetDiagnosticCentreSchedulesWithDiagnosticsDetails(ctx context.Context, arg GetDiagnosticCentreSchedulesWithDiagnosticsDetailsParams) ([]*GetDiagnosticCentreSchedulesWithDiagnosticsDetailsRow, error) {
	rows, err := q.db.Query(ctx, getDiagnosticCentreSchedulesWithDiagnosticsDetails, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDiagnosticCentreSchedulesWithDiagnosticsDetailsRow
	for rows.Next() {
		var i GetDiagnosticCentreSchedulesWithDiagnosticsDetailsRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.UserID,
			&i.Date,
			&i.Time,
			&i.TestType,
			&i.Status,
			&i.Notes,
			&i.DiagnosticCentreName,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Contact,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiagnosticCentreUpcomingSchedules = `-- name: GetDiagnosticCentreUpcomingSchedules :many
SELECT 
  ds.id AS schedule_id,
  ds.user_id,
  ds.date,
  ds.time,
  ds.test_type,
  ds.status,
  ds.notes,
  d.diagnostic_centre_name
FROM diagnostic_schedules ds
JOIN diagnostics d ON ds.diagnostic_centre_id = d.id
WHERE d.id = $1 AND ds.date >= NOW()
ORDER BY ds.date ASC, ds.time ASC
LIMIT $2 OFFSET $3
`

type GetDiagnosticCentreUpcomingSchedulesParams struct {
	ID     string `db:"id" json:"id"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

type GetDiagnosticCentreUpcomingSchedulesRow struct {
	ScheduleID           string             `db:"schedule_id" json:"schedule_id"`
	UserID               string             `db:"user_id" json:"user_id"`
	Date                 pgtype.Timestamptz `db:"date" json:"date"`
	Time                 pgtype.Timestamptz `db:"time" json:"time"`
	TestType             ScheduleType       `db:"test_type" json:"test_type"`
	Status               ScheduleStatus     `db:"status" json:"status"`
	Notes                pgtype.Text        `db:"notes" json:"notes"`
	DiagnosticCentreName string             `db:"diagnostic_centre_name" json:"diagnostic_centre_name"`
}

func (q *Queries) GetDiagnosticCentreUpcomingSchedules(ctx context.Context, arg GetDiagnosticCentreUpcomingSchedulesParams) ([]*GetDiagnosticCentreUpcomingSchedulesRow, error) {
	rows, err := q.db.Query(ctx, getDiagnosticCentreUpcomingSchedules, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDiagnosticCentreUpcomingSchedulesRow
	for rows.Next() {
		var i GetDiagnosticCentreUpcomingSchedulesRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.UserID,
			&i.Date,
			&i.Time,
			&i.TestType,
			&i.Status,
			&i.Notes,
			&i.DiagnosticCentreName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDiagnostics = `-- name: ListDiagnostics :many
SELECT id, user_id, diagnostic_centre_name, latitude, longitude, address, contact, created_at, updated_at FROM diagnostics WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListDiagnosticsParams struct {
	UserID string `db:"user_id" json:"user_id"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

// Retrieves all diagnostic records for a specific user.
func (q *Queries) ListDiagnostics(ctx context.Context, arg ListDiagnosticsParams) ([]*Diagnostic, error) {
	rows, err := q.db.Query(ctx, listDiagnostics, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Diagnostic
	for rows.Next() {
		var i Diagnostic
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DiagnosticCentreName,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Contact,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchDiagnostics = `-- name: SearchDiagnostics :many
SELECT id, user_id, diagnostic_centre_name, latitude, longitude, address, contact, created_at, updated_at
FROM diagnostics
WHERE name ILIKE '%' || $1 || '%'
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type SearchDiagnosticsParams struct {
	Column1 pgtype.Text `db:"column_1" json:"column_1"`
	Limit   int32       `db:"limit" json:"limit"`
	Offset  int32       `db:"offset" json:"offset"`
}

// Searches diagnostics by name with pagination.
func (q *Queries) SearchDiagnostics(ctx context.Context, arg SearchDiagnosticsParams) ([]*Diagnostic, error) {
	rows, err := q.db.Query(ctx, searchDiagnostics, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Diagnostic
	for rows.Next() {
		var i Diagnostic
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DiagnosticCentreName,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Contact,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDiagnostic = `-- name: UpdateDiagnostic :one
UPDATE diagnostics
SET
  diagnostic_centre_name = COALESCE($2, diagnostic_centre_name),
  latitude = COALESCE($3, latitude),
  longitude = COALESCE($4, longitude),
  address = COALESCE($5, address),
  contact = COALESCE($6, contact),
  updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, diagnostic_centre_name, latitude, longitude, address, contact, created_at, updated_at
`

type UpdateDiagnosticParams struct {
	ID                   string        `db:"id" json:"id"`
	DiagnosticCentreName string        `db:"diagnostic_centre_name" json:"diagnostic_centre_name"`
	Latitude             pgtype.Float8 `db:"latitude" json:"latitude"`
	Longitude            pgtype.Float8 `db:"longitude" json:"longitude"`
	Address              []byte        `db:"address" json:"address"`
	Contact              []byte        `db:"contact" json:"contact"`
}

// Updates a diagnostic record by its ID.
func (q *Queries) UpdateDiagnostic(ctx context.Context, arg UpdateDiagnosticParams) (*Diagnostic, error) {
	row := q.db.QueryRow(ctx, updateDiagnostic,
		arg.ID,
		arg.DiagnosticCentreName,
		arg.Latitude,
		arg.Longitude,
		arg.Address,
		arg.Contact,
	)
	var i Diagnostic
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DiagnosticCentreName,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Contact,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
